{"version":3,"sources":["Component/Header/MainNav/index.js","Component/Common/Loader/index.js","Component/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["MainNav","props","useState","isSticky","setSticky","position","setPosition","handleScroll","document","body","getBoundingClientRect","top","useEffect","window","addEventListener","removeEventListener","className","Container","Row","Col","md","Navbar","collapseOnSelect","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Loader","Footer","lg","sm","HomePage","React","lazy","App","Suspense","fallback","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAmDeA,EA1CC,SAACC,GAAW,IAAD,EACOC,oBAAS,GADhB,mBAChBC,EADgB,KACNC,EADM,OAESF,mBAAS,GAFlB,mBAEhBG,EAFgB,KAENC,EAFM,KAGjBC,EAAe,WACjBD,EAAYE,SAASC,KAAKC,wBAAwBC,KAClDP,EAAUI,SAASC,KAAKC,wBAAwBC,IAAMN,IAU1D,OAPAO,qBAAU,WAGN,OAFAC,OAAOC,iBAAiB,SAAUP,GAE3B,WACHM,OAAOE,oBAAoB,UAAU,kBAAMR,QAEhD,IAEC,4BAAQS,UAAS,oCAA+Bb,EAAW,oBAAsB,KAC7E,kBAACc,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACN,UAAU,YAC/B,kBAACK,EAAA,EAAOE,MAAR,CAAcC,KAAK,QAAQR,UAAU,QAArC,WAAoD,wCACpD,kBAACK,EAAA,EAAOI,OAAR,CAAeC,gBAAc,0BAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKb,UAAU,WACX,kBAACa,EAAA,EAAIC,KAAL,CAAUN,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,aAAf,SACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,gBAAf,WACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,aAAf,aACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,eAAf,aAGR,yBAAKR,UAAU,eAAc,uBAAGQ,KAAK,KAAR,kBClB1CO,EAhBA,SAAC9B,GACZ,OACI,yBAAK2B,GAAG,eAAeZ,UAAU,gBAC7B,yBAAKA,UAAU,mBACX,0BAAMA,UAAU,QAChB,yBAAKA,UAAU,QACX,+BACA,+BACA,mCCSLgB,EAhBA,SAAC/B,GACZ,OACI,gCACI,kBAACgB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKc,GAAG,KAAKC,GAAG,MACZ,gFAAkD,uBAAGV,KAAK,iCAAiCR,UAAU,gBAAnD,2BCPpEmB,EAAWC,IAAMC,MAAK,kBAAM,sDAkBnBC,MAhBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKtB,UAAU,OACb,kBAAC,IAAMuB,SAAP,CAAgBC,SACd,kBAAC,EAAD,OAEA,kBAAC,EAAD,MACA,kBAACL,EAAD,MACA,kBAAC,EAAD,UCNUM,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvC,SAASwC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2781b6d.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useState } from 'react';\r\nimport { Container, Row, Col, Navbar, Nav } from 'react-bootstrap'\r\n\r\n/**\r\n* @author\r\n* @function MainNav\r\n**/\r\n\r\nconst MainNav = (props) => {\r\n    const [isSticky, setSticky] = useState(false);\r\n    const [position, setPosition] = useState(0);\r\n    const handleScroll = () => {\r\n        setPosition(document.body.getBoundingClientRect().top);\r\n        setSticky(document.body.getBoundingClientRect().top < position);\r\n\r\n    };\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', handleScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', () => handleScroll);\r\n        };\r\n    }, []);\r\n    return (\r\n        <header className={`header-area header-sticky ${isSticky ? 'background-header' : ''}`}>\r\n            <Container>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <Navbar collapseOnSelect className=\"main-nav\">\r\n                            <Navbar.Brand href=\"#home\" className=\"logo\">Training<em> Studio</em></Navbar.Brand>\r\n                            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                                <Nav className=\"ml-auto\">\r\n                                    <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                                    <Nav.Link href=\"#features\">About</Nav.Link>\r\n                                    <Nav.Link href=\"#our-classes\">Classes</Nav.Link>\r\n                                    <Nav.Link href=\"#schedule\">Schedules</Nav.Link>\r\n                                    <Nav.Link href=\"#contact-us\">Contact</Nav.Link>\r\n                                </Nav>\r\n                            </Navbar.Collapse>\r\n                            <div className=\"main-button\"><a href=\"#\">Sign Up</a></div>\r\n                        </Navbar>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </header>\r\n    )\r\n\r\n}\r\n\r\nexport default MainNav","import React from 'react'\r\n\r\n/**\r\n* @author\r\n* @function Loader\r\n**/\r\n\r\nconst Loader = (props) => {\r\n    return (\r\n        <div id=\"js-preloader\" className=\"js-preloader\">\r\n            <div className=\"preloader-inner\">\r\n                <span className=\"dot\"></span>\r\n                <div className=\"dots\">\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Loader","import React from 'react'\r\nimport { Col, Container, Row } from 'react-bootstrap'\r\n\r\n/**\r\n* @author\r\n* @function Footer\r\n**/\r\n\r\nconst Footer = (props) => {\r\n    return (\r\n        <footer>\r\n            <Container>\r\n                <Row>\r\n                    <Col lg=\"12\" sm=\"12\">\r\n                        <p>Copyright Â© 2020 Training Studio - Designed by <a href=\"https://github.com/saraswatiti\" className=\"tm-text-link\">Saraswati Timsina</a>\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </footer>\r\n    )\r\n\r\n}\r\n\r\nexport default Footer","import React from 'react';\nimport './App.css';\nimport { HashRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainNav from './Component/Header/MainNav';\nimport Loader from './Component/Common/Loader';\nimport Footer from './Component/Footer';\nconst HomePage = React.lazy(() => import(\"../src/Component/HomePage\"));\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <React.Suspense fallback={\n          <Loader />\n        }>\n          <MainNav />\n          <HomePage />\n          <Footer />\n        </React.Suspense>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}